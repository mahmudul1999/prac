data("wine")
wine
fit1 = MFA(wine, group=c(2,5,3,10,9,2), type=c("n",rep("s",5)),
              ncp=5, name.group=c("orig","olf","vis","olfag","gust","ens"),
              num.group.sup=c(1,6))
fit1$eig
fit1$group
print(fit1)

summary(fit1)

x = wine[-(1:2)]

dev.new()
ev = eigen(cor(x))
ap = parallel(subject = nrow(x), var = ncol(x))
plotnScree(nScree(x = ev$values, aparallel = ap$eigen$qevpea))

##KM

data("iris")
attach(iris)

k = 3
kmeans.obj = kmeans(iris[-5], k)

dev.new()
pairs(iris[-5], col = kmeans.obj$cluster + 1)
dev.new()
pairs(iris[-5], col = as.numeric(as.factor(iris[, 5])) + 1)

# HC

d = dist(iris[-5])
tree.avg = hclust(d)
dev.new()
plot(tree.avg)
rect.hclust(tree.avg, k)

membership = cutree(tree.avg, k)
dev.new()
pairs(iris[-5], col = membership + 1)
dev.new()
pairs(iris[-5], col = as.numeric(as.factor(iris[, 5])) + 1)

gap = clusGap(iris[-5], FUNcluster = kmeans, K.max = 10)
dev.new()
plot(gap)

### Balancing Data

data(hacide)

summary(hacide.train)
summary(hacide.test)
str(hacide.train)
str(hacide.test)

data_bal_under = ovun.sample(cls ~ ., data = hacide.train, method = 'under')$data
data_bal_over = ovun.sample(cls ~ ., data = hacide.train, method = 'over')$data
data_bal_both = ovun.sample(cls ~ ., data = hacide.train, method = 'both')$data
data_bal_rose = ROSE(cls ~ ., data = hacide.train)$data

prop.table(table(hacide.train$cls))
prop.table(table(data_bal_under$cls))
prop.table(table(data_bal_over$cls))
prop.table(table(data_bal_both$cls))
prop.table(table(data_bal_rose$cls))

classifer_main = rpart(cls ~ ., data = hacide.train)
classifer_under = rpart(cls ~ ., data = data_bal_under)
classifer_over = rpart(cls ~ ., data = data_bal_over)
classifer_both = rpart(cls ~ ., data = data_bal_both)
classifer_rose = rpart(cls ~ ., data = data_bal_rose)

y_pred_main = predict(classifer_main, newdata = hacide.test)
y_pred_under = predict(classifer_under, newdata = hacide.test)
y_pred_over = predict(classifer_over, newdata = hacide.test)
y_pred_both = predict(classifer_both, newdata = hacide.test)
y_pred_rose = predict(classifer_rose, newdata = hacide.test)

dev.new()
roc.curve(hacide.test$cls, y_pred_main[, 1], col = 2, lty = 2, lwd = 2)
roc.curve(hacide.test$cls, y_pred_under[, 1], add.roc = T, col = 3, lty = 3, lwd = 2)
roc.curve(hacide.test$cls, y_pred_over[, 1], add.roc = T, col = 4, lty = 4, lwd = 2)
roc.curve(hacide.test$cls, y_pred_both[, 1], add.roc = T, col = 5, lty = 5, lwd = 2)
roc.curve(hacide.test$cls, y_pred_rose[, 1], add.roc = T, col = 6, lty = 6, lwd = 2)

legend('bottomright', legend = c('main', 'under', 'over', 'both', 'rose'), 
       col = 2:6, lty = 2:6, cex = 1, bty = 'n', text.col = 2:6)

y_pred_main = predict(classifer_main, newdata = hacide.test, type = 'class')
y_pred_under = predict(classifer_under, newdata = hacide.test, type = 'class')
y_pred_over = predict(classifer_over, newdata = hacide.test, type = 'class')
y_pred_both = predict(classifer_both, newdata = hacide.test, type = 'class')
y_pred_rose = predict(classifer_rose, newdata = hacide.test, type = 'class')

accuracy.meas(hacide.test$cls, y_pred_main)
accuracy.meas(hacide.test$cls, y_pred_under)
accuracy.meas(hacide.test$cls, y_pred_over)
accuracy.meas(hacide.test$cls, y_pred_both)
accuracy.meas(hacide.test$cls, y_pred_rose)

confusionMatrix(hacide.test$cls, y_pred_main, positive = '1')
confusionMatrix(hacide.test$cls, y_pred_under, positive = '1')
confusionMatrix(hacide.test$cls, y_pred_over, positive = '1')
confusionMatrix(hacide.test$cls, y_pred_both, positive = '1')
confusionMatrix(hacide.test$cls, y_pred_rose, positive = '1')

####

set.seed(110)
library(MASS)
head(iris)
rdata = iris
dim(iris)
index <- sample(1:150,105,replace = FALSE)
s.ind <- sort(index);s.ind
train=iris[s.ind,]
test=iris[-s.ind,]
d=lda(train[,-5],train[,5])
d
predicted_class=predict(d,test[,-5])$class
predicted_class
Compare_class<-cbind(test[,5],predicted_class)
Compare_class
tab1=table(test[,5],predicted_class)
tab1
misclassification.rate<-1-sum(diag(tab1))/sum(tab1)
misclassification.rate
